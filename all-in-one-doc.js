// all-in-one-doc.js
// `npm run one`
// (not added in build or deploy pipeline, cause it makes babel deoptimized)
// Write a file called `one.md` that includes all docs under base path.
const fs = require('fs/promises');

// layer0 path
const basePath = './docs/';
// base blog url
const baseUrl = 'https://blog.suningyao.com';

// Return if variable is string.
const isString = (string) => {
  if (typeof string === 'string' || string instanceof String) {
    return true;
  }
  return false;
};

// Get first character of variable.
const getFirstChar = (string) => {
  if (!isString(string)) {
    return null;
  }
  return string.slice(0, 1);
};

// Return if a filename indicates it is a markdown file.
const isMarkdown = (name) => {
  if (name.slice(name.lastIndexOf('.') + 1) !== 'md') {
    return false;
  }
  return true;
};

// Return all file/directory names as array under directory.
const getNamesArrayInDir = async (dirPath) => {
  const names = await fs.readdir(dirPath).catch((err) => console.log(err));
  return names;
};

// Remove metadata from doc content.
// eg. "---" with "sidebar_label", "sidebar_position"
const removeMetadataFromDoc = (lines) => {
  let lastMetadataIndex = -1;
  for (let i = 0; i < lines.length; i++) {
    if (i < 4 && lines[i] === '---') {
      lastMetadataIndex = i;
    }
  }
  return lines.slice(lastMetadataIndex + 1);
};

// Add metadata as heading to the start of doc content.
// eg. "# [intro.md](https://blog.suningyao.com/docs/intro)"
const addMetadata = (lines, docPath) => {
  const blogLink = baseUrl + docPath.slice(1, -3);
  const docName = docPath.slice(1);
  const metadata = `# [${docName}](${blogLink})`;
  return [metadata, ...lines];
};

// Return formatted doc after removing unneeded metadata and adding needed ones.
const formatDoc = (doc, docPath) => {
  let lines = doc.split('\n');
  lines = removeMetadataFromDoc(lines);
  lines = addMetadata(lines, docPath);
  let formattedDoc = lines.join('\n');
  return formattedDoc;
};

// Return formatted doc content with input of doc path.
const readDoc = async (docPath) => {
  const doc = await fs
    .readFile(docPath, 'UTF-8')
    .catch((err) => console.log(err));
  return formatDoc(doc, docPath);
};

// Get directory names under base path of 'doc'.
const getLayer1 = async (layer0) => {
  let layer1 = await getNamesArrayInDir(layer0);
  layer1 = layer1.filter((name) => getFirstChar(name) !== '.');
  layer1 = layer1.map((name) => layer0 + name);
  return layer1;
};

// Add doc contents to the global doc string.
const addLayerToTheDoc = async (layer, theDoc) => {
  for (let name of layer) {
    if (isMarkdown(name)) {
      const doc = await readDoc(name);
      theDoc += doc;
      theDoc += '\n';
    }
  }
  return theDoc;
};

// Get doc file names under base path of each directory.
const getLayer2 = async (layer1) => {
  let layer2 = [];
  const layer1Dirs = layer1.filter((name) => !isMarkdown(name));
  for (let dirName of layer1Dirs) {
    const docNames = await getNamesArrayInDir(dirName);
    for (let docName of docNames) {
      layer2.push(dirName + '/' + docName);
    }
  }
  layer2 = layer2.filter((name) => isMarkdown(name));
  return layer2;
};

// Add intro to the global doc string with analytics and other contents.
const docWithIntro = (doc, wordCount, wordPerMinute = 250) => {
  const introLines = [
    '---',
    'sidebar_position: 999999',
    'sidebar_label: "All in One"',
    '---',
    '# _All in One_\n',
    '> This is a 472-pager (this number may be not exact) of all my blogs.',
    '>',
    `> Word count: ${wordCount} words. Estimated reading time: ${parseInt(
      wordCount / wordPerMinute,
    )} minutes.`,
    '>',
    '> Feel free to save as PDF after serving to read. (may take a few minutes)',
    '>',
    '> Generated by [this script](https://github.com/fewwwww/blog.suningyao.com/blob/master/all-in-one-doc.js)\n\n',
  ];
  const intro = introLines.join('\n');
  return intro + doc;
};

// Run.
(async () => {
  // Initiate global doc string.
  let theDoc = '';
  // cd docs.
  const layer0 = basePath;
  // ls docs.
  const layer1 = await getLayer1(layer0);
  // cp doc contents to global doc string.
  theDoc = await addLayerToTheDoc(layer1, theDoc);
  // ls directories.
  const layer2 = await getLayer2(layer1);
  // cp doc contents to global doc string.
  theDoc = await addLayerToTheDoc(layer2, theDoc);
  // cp doc intro to global doc string.
  theDoc = docWithIntro(theDoc, theDoc.split(' ').length);
  // write doc string into one.md.
  fs.writeFile('./docs/one.md', theDoc);
})();
